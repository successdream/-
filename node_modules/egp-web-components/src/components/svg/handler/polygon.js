const _data = {
  polygon: null,
  isClicked: false,
};

export default {
  init() {
    _data.polygon = null;
  },

  drawObj(draw, options) {
    const r = draw.polygon(fromData(draw.node, options.data));
    const params = {
      color: options.color || 'black',
      dasharray: options.dasharray || '',
    };
    r.fill('none').stroke(params).data('egp', options);
  },

  mouseDown(event, draw, options) {
    if (_data.isClicked) return;
    _data.isClicked = true;
    setTimeout(() => _data.isClicked = false, 300);

    const { layerX: x, layerY: y } = event;
    if (_data.polygon) {
      _data.polygon.array().value.push([x, y]);
    } else {
      _data.polygon = draw.polygon([[x, y], [x, y]]);
      _data.polygon.fill('none').stroke({color: options.color, dasharray: '5,7'});
    };
  },

  dblClick(draw, options) {
    const p = _data.polygon;
    // 由于临时点的缘故，事实上一直都多了一个点，最后保存时要把这个点去掉
    if (!p || p.array().value.length < 4) return;
    p.array().value.pop();

    const { type, name, color } = options;
    p.stroke({color, dasharray: ''});
    p.data('egp', {
      id: new Date().getTime().toString(), type, name, color,
      data: toData(draw.node, p.array().value),
    });
    this.init();
    return p;
  },

  mouseMove(event) {
    const { layerX: x, layerY: y } = event;
    const p = _data.polygon;
    if (!p) return;
    const points = p.array().value;
    if (points.length > 1) {
      points[points.length - 1] = [x, y];
      p.plot(points);
    };
  },

};

function toData(doc, polygon) {
  const {clientWidth: w, clientHeight: h} = doc;
  const result = [];
  polygon.forEach(point => result.push({x: point[0] / w, y: point[1] / h}));
  return result;
};

function fromData(doc, polygon) {
  const {clientWidth: w, clientHeight: h} = doc;
  const result = [];
  polygon.forEach(point => result.push([point.x * w, point.y * h]));
  return result;
};
