{"remainingRequest":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\babel-loader\\lib\\index.js!D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\ts-loader\\index.js??ref--13-2!D:\\work\\workSpace\\upload\\picture-detection-window\\src\\api\\index.ts","dependencies":[{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\src\\api\\index.ts","mtime":1563855797739},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\ts-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\work\\\\workSpace\\\\upload\\\\picture-detection-window\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport ws from \"./ws\";\nimport intrusion from \"./intrusion\";\nimport result from \"./result\"; // axios.defaults.baseURL = '/api';\n\nexport default {\n  http: function () {\n    var _http = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(requestMode, url, params, options) {\n      var res;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios(Object.assign({\n                url: url,\n                method: requestMode,\n                data: params\n              }, options));\n\n            case 3:\n              res = _context.sent;\n\n              if (!(res.status === 200)) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"return\", res.data);\n\n            case 8:\n              console.log(\"\\u72B6\\u6001\\u7801\\u4E3A\".concat(res.status), res);\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(\"\".concat(url, \"-\").concat(requestMode, \"\\u8BF7\\u6C42\\u5F02\\u5E38\"), _context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    function http(_x, _x2, _x3, _x4) {\n      return _http.apply(this, arguments);\n    }\n\n    return http;\n  }(),\n  intrusion: intrusion,\n  result: result,\n  ws: ws\n};",{"version":3,"sources":["D:\\work\\workSpace\\upload\\picture-detection-window\\src\\api\\index.ts"],"names":[],"mappings":";;AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,EAAP;AACA,OAAO,SAAP;AACA,OAAO,MAAP,iB,CAEA;;AAEA,eAAe;AACP,EAAA,IADO;AAAA;AAAA;AAAA,6CACF,WADE,EACgB,GADhB,EAC6B,MAD7B,EAC2C,OAD3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGS,KAAK,CAAC,MAAM,CAAC,MAAP,CAAc;AACpC,gBAAA,GAAG,EAAH,GADoC;AAEpC,gBAAA,MAAM,EAAE,WAF4B;AAGpC,gBAAA,IAAI,EAAE;AAH8B,eAAd,EAIrB,OAJqB,CAAD,CAHd;;AAAA;AAGH,cAAA,GAHG;;AAAA,oBAQN,GAAG,CAAC,MAAJ,KAAe,GART;AAAA;AAAA;AAAA;;AAAA,+CASA,GAAG,CAAC,IATJ;;AAAA;AAWP,cAAA,OAAO,CAAC,GAAR,mCAAmB,GAAG,CAAC,MAAvB,GAAiC,GAAjC;;AAXO;AAAA;AAAA;;AAAA;AAAA;AAAA;AAcT,cAAA,OAAO,CAAC,GAAR,WAAe,GAAf,cAAsB,WAAtB;;AAdS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiBb,EAAA,SAAS,EAAT,SAjBa;AAkBb,EAAA,MAAM,EAAN,MAlBa;AAmBb,EAAA,EAAE,EAAF;AAnBa,CAAf","sourcesContent":["import axios from 'axios';\nimport ws  from './ws';\nimport intrusion from './intrusion';\nimport result from './result';\n\n// axios.defaults.baseURL = '/api';\n\nexport default {\n  async http(requestMode: any, url: string, params?: any, options?: any) {\n    try {\n      const res = await axios(Object.assign({\n        url,\n        method: requestMode,\n        data: params\n      }, options));\n      if(res.status === 200) {\n        return res.data;\n      } else {\n        console.log(`状态码为${res.status}`, res);\n      }\n    } catch (error) {\n      console.log(`${url}-${requestMode}请求异常`, error);\n    }\n  },\n  intrusion,\n  result,\n  ws,\n}"],"sourceRoot":""}]}