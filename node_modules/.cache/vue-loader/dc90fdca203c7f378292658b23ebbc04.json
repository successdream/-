{"remainingRequest":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\egp-web-components\\src\\components\\json\\EgpJson.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\egp-web-components\\src\\components\\json\\EgpJson.vue","mtime":499162500000},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: 'json-container',\r\n  data () {\r\n    return {};\r\n  },\r\n  props: ['value', 'scrollIntoView'],\r\n  computed: {\r\n    jsonValue: function() {\r\n      const el = document.getElementById('egp-json-container');\r\n      if (el) {\r\n        el.innerHTML = this.syntaxHighlight(this.value);\r\n        el.scrollIntoView(this.scrollIntoView);\r\n      }\r\n      return this.syntaxHighlight(this.value);\r\n    }\r\n  },\r\n  methods: {\r\n    syntaxHighlight(json) {\r\n      if (typeof json != 'string') {\r\n        json = JSON.stringify(json, undefined, 2);\r\n      }\r\n      json = json.replace(/&/g, '&').replace(/</g, '<').replace(/>/g, '>');\r\n      return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function(match) {\r\n        var cls = 'number';\r\n        if (/^\"/.test(match)) {\r\n          if (/:$/.test(match)) {\r\n            cls = 'key';\r\n          } else {\r\n            cls = 'string';\r\n          }\r\n        } else if (/true|false/.test(match)) {\r\n          cls = 'boolean';\r\n        } else if (/null/.test(match)) {\r\n          cls = 'null';\r\n        }\r\n        return '<span class=\"' + cls + '\">' + match + '</span>';\r\n      });\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["EgpJson.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EgpJson.vue","sourceRoot":"node_modules/egp-web-components/src/components/json","sourcesContent":["<template>\r\n  <div>\r\n    <pre id=\"egp-json-container\"></pre>\r\n    <span hidden>{{jsonValue}}</span>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'json-container',\r\n  data () {\r\n    return {};\r\n  },\r\n  props: ['value', 'scrollIntoView'],\r\n  computed: {\r\n    jsonValue: function() {\r\n      const el = document.getElementById('egp-json-container');\r\n      if (el) {\r\n        el.innerHTML = this.syntaxHighlight(this.value);\r\n        el.scrollIntoView(this.scrollIntoView);\r\n      }\r\n      return this.syntaxHighlight(this.value);\r\n    }\r\n  },\r\n  methods: {\r\n    syntaxHighlight(json) {\r\n      if (typeof json != 'string') {\r\n        json = JSON.stringify(json, undefined, 2);\r\n      }\r\n      json = json.replace(/&/g, '&').replace(/</g, '<').replace(/>/g, '>');\r\n      return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function(match) {\r\n        var cls = 'number';\r\n        if (/^\"/.test(match)) {\r\n          if (/:$/.test(match)) {\r\n            cls = 'key';\r\n          } else {\r\n            cls = 'string';\r\n          }\r\n        } else if (/true|false/.test(match)) {\r\n          cls = 'boolean';\r\n        } else if (/null/.test(match)) {\r\n          cls = 'null';\r\n        }\r\n        return '<span class=\"' + cls + '\">' + match + '</span>';\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\npre {padding: 5px; margin: 5px; font-size: 1.05em; }\r\n.string { color: green; }\r\n.number { color: darkorange; }\r\n.boolean { color: blue; }\r\n.null { color: magenta; }\r\n.key { color: red; }\r\n</style>\r\n"]}]}