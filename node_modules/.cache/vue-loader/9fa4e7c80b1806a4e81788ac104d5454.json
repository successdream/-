{"remainingRequest":"D:\\work\\workSpace\\upload\\picture-detection-window1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\work\\workSpace\\upload\\picture-detection-window1\\node_modules\\egp-web-components\\src\\components\\svg\\EgpSvg.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\work\\workSpace\\upload\\picture-detection-window1\\node_modules\\egp-web-components\\src\\components\\svg\\EgpSvg.vue","mtime":1563503362197},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window1\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window1\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\r\nimport SVG from 'svg.js';\r\nimport 'svg.select.js';\r\nimport 'svg.resize.js';\r\nimport 'svg.draggable.js';\r\nimport Handler from './handler';\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      draw: SVG(),\r\n    };\r\n  },\r\n  props: {\r\n    imgSrc: { type: String, default: '' },\r\n    options: { type: Object, default: function () { return {} } }\r\n  },\r\n  watch: {\r\n    options: function (newValue, oldValue) {\r\n      console.log(newValue, 'newValue')\r\n      if (this.$refs.svgContainer)\r\n        Handler.register(this, this.$refs.svgContainer, this.draw, newValue);\r\n    },\r\n  },\r\n  mounted() {\r\n    this.draw = SVG.adopt(this.$refs.svg);\r\n  },\r\n  methods: {\r\n    setData(data) {\r\n      if (JSON.stringify(this.getData()) === JSON.stringify(data)) return;\r\n      this.draw.clear();\r\n      data = JSON.parse(JSON.stringify(data));\r\n      data.forEach(d => {\r\n        if (Handler[d.type]) Handler[d.type].drawObj(this.draw, d);\r\n      });\r\n    },\r\n\r\n    getData() {\r\n      return this.draw.children().filter(e => e.data('egp')).map(d => d.data('egp'));\r\n    },\r\n\r\n  },\r\n}\r\n",{"version":3,"sources":["EgpSvg.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA","file":"EgpSvg.vue","sourceRoot":"node_modules/egp-web-components/src/components/svg","sourcesContent":["<template>\r\n  <div ref=\"svgContainer\" class=\"full-fill\" style=\"display:flex;position:relative;\" onselectstart=\"return false\">\r\n    <img ref=\"img\" class=\"full-fill\" width=\"100%\" height=\"100%\" :src=\"imgSrc\" style=\"background:#eee\">\r\n    <svg ref=\"svg\" width=\"100%\" height=\"100%\" class=\"full-fill\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SVG from 'svg.js';\r\nimport 'svg.select.js';\r\nimport 'svg.resize.js';\r\nimport 'svg.draggable.js';\r\nimport Handler from './handler';\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      draw: SVG(),\r\n    };\r\n  },\r\n  props: {\r\n    imgSrc: { type: String, default: '' },\r\n    options: { type: Object, default: function () { return {} } }\r\n  },\r\n  watch: {\r\n    options: function (newValue, oldValue) {\r\n      console.log(newValue, 'newValue')\r\n      if (this.$refs.svgContainer)\r\n        Handler.register(this, this.$refs.svgContainer, this.draw, newValue);\r\n    },\r\n  },\r\n  mounted() {\r\n    this.draw = SVG.adopt(this.$refs.svg);\r\n  },\r\n  methods: {\r\n    setData(data) {\r\n      if (JSON.stringify(this.getData()) === JSON.stringify(data)) return;\r\n      this.draw.clear();\r\n      data = JSON.parse(JSON.stringify(data));\r\n      data.forEach(d => {\r\n        if (Handler[d.type]) Handler[d.type].drawObj(this.draw, d);\r\n      });\r\n    },\r\n\r\n    getData() {\r\n      return this.draw.children().filter(e => e.data('egp')).map(d => d.data('egp'));\r\n    },\r\n\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.full-fill {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n</style>\r\n"]}]}