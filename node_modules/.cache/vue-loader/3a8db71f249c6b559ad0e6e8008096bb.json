{"remainingRequest":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\work\\workSpace\\upload\\picture-detection-window\\src\\views\\pictureDetection\\Main.vue?vue&type=script&lang=ts&","dependencies":[{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\src\\views\\pictureDetection\\Main.vue","mtime":1563759171849},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\work\\workSpace\\upload\\picture-detection-window\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Component, Vue, Watch } from 'vue-property-decorator';\nimport moment from 'moment';\nimport { EgpSvg } from 'egp-web-components';\nimport Card from '@/components/card/Main.vue';\nimport API from '@/api';\nimport { Params, Rule, originRule, Record } from '../../api/intrusion';\nimport { ElUpload } from 'element-ui/types/upload';\nimport axios from 'axios';\nimport uuid from 'uuid/v4';\nimport recordDetail from './RecordDetail.vue'\n\ninterface Point {\n  x: number;\n  y:number;\n}\n\n\n// http://192.168.3.109:7001/postImg\n@Component({\n  components: {\n    EgpSvg,\n    recordDetail,\n  }\n})\nexport default class IntrusionDetection extends Vue {\n  $refs!: {\n    upload: ElUpload;\n    egpSvg: any;\n    recordDetail:recordDetail;\n  }\n  private svgOptions: any = {};\n  private fileList: any[] = [];\n  private files: any[] = [];\n  private imgSrc = '';\n  private uploadLoding = false;\n  private detectionResult: any = {} \n  private resultImg = ''\n  private secondSelect = false;\n  private uploadBtn = 'success';\n  private intrusionStyle = true;\n\n  private uploadData: {\n    confidence: number,\n    nms: number,\n    type: string,\n    region: string,\n  } = {\n    confidence: 0.8,\n    nms: 0.4,\n    type: 'attitude',\n    region: '',\n  };\n\n  mounted(){\n    if(this.uploadData && this.uploadData.hasOwnProperty('confidence'))  delete this.uploadData.confidence;\n    if(this.uploadData && this.uploadData.hasOwnProperty('nms'))  delete this.uploadData.nms;\n    if(this.uploadData && this.uploadData.hasOwnProperty('region'))  delete this.uploadData.region;\n  }\n  \n  private async submitUpload() {\n    const fs = this.$refs.upload;\n    if(!fs) return;\n    let rules: any[] = [];\n    const { uploadFiles } = fs as any;\n    if(uploadFiles.length === 0){\n       this.$message({\n        message: '请选择文件后上传',\n        type:'warning'\n      })\n      return;\n    }\n    if(this.$refs.egpSvg) rules = this.$refs.egpSvg.getData();\n    if(!rules.length && this.uploadData.type === 'intrusion'){\n      this.$message({\n        message: '请您绘画规则后上传',\n        type:'warning'\n      })\n      return;\n    }\n\n    if(this.uploadLoding){\n       this.$message({\n        message: '图片上传还未完成，请您稍等',\n        type:'warning'\n      })\n      return;\n    }\n    if(this.secondSelect){\n       this.$message({\n        message: '图片已经上传，请重新选择图片后上传',\n        type:'warning'\n      })\n      return;\n    }\n    this.uploadLoding = true;\n    this.secondSelect = true;\n    (fs as any).uploadFiles = (fs as any).uploadFiles || [];\n    (fs as any).uploadFiles = [(fs as any).uploadFiles[(fs as any).uploadFiles.length - 1]];\n    if(this.uploadData.type === 'intrusion') this.uploadData.region = JSON.stringify(this.originToCommon(rules));\n    this.$refs.upload.submit();\n  }\n  \n  private originToCommon(rules: originRule[]): Rule[] {\n    return rules.map(item => ({ location: item.data, rule_id: item.id }));\n  }\n\n  private clearAll() {\n    this.fileList = [];\n    this.imgSrc = '';\n    if(this.$refs.egpSvg)\n      this.$refs.egpSvg.setData([]);\n  }\n  \n  private uploadChange(file: any, fileList: any) {\n    const imgSrc = window.URL.createObjectURL(file.raw);\n    this.imgSrc = imgSrc;\n  }\n  \n  private uploadSuccess(res: any, file: any, fileList: any) {\n    this.uploadLoding = false;\n    this.detectionResult = res;\n    if(res.algType && res.algType !== 1){\n      console.log(res, '分析结果');\n      this.$message({message:\"分析错误\",\n        type: 'error'\n      })\n      return;\n    }\n    this.resultImg = res.img_base64? `data:image/png;base64, ${res.img_base64}` : '';\n    //强制刷新\n    // this.files = [];\n  }\n  \n  private uploadError(res: any, file: any, fileList: any){\n    this.uploadLoding = false;\n    console.log(res, 'uploadError');\n  }\n  \n  //清空数据\n  private clearData(){\n    if(this.$refs.egpSvg) this.$refs.egpSvg.setData([]);\n  }\n //展示结果\n  private showResult(){\n    this.$nextTick(() => {\n      this.$refs.recordDetail.show(this.detectionResult);\n    })\n  }\n\n  private nativeUploadChange(e: any){\n    this.secondSelect = false;\n    this.$refs.egpSvg.setData([]);\n  }\n  \n\n  private selectChange(value: string) {\n    if(value === 'intrusion') {\n      this.intrusionStyle = false;\n      this.$nextTick(() => {\n        this.svgOptions = { type: 'polygon', name: value, color: 'red' };\n        this.uploadData = { confidence: 0.8, nms: 0.4, type: 'intrusion',region: '',};\n      })\n      console.log(this.uploadData, 'uploadData', this.svgOptions )\n    } else {\n      if(this.$refs.egpSvg) this.$refs.egpSvg.setData([]);\n      this.svgOptions = {};\n      this.intrusionStyle = true;\n      if(this.uploadData && this.uploadData.hasOwnProperty('confidence')) {\n        delete this.uploadData.confidence;\n      }\n      if(this.uploadData && this.uploadData.hasOwnProperty('nms')) {\n        delete this.uploadData.nms;\n      }\n      if(this.uploadData && this.uploadData.hasOwnProperty('region')) {\n        delete this.uploadData.region;\n      }\n    }\n  }\n\n}\n",{"version":3,"sources":["Main.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"Main.vue","sourceRoot":"src/views/pictureDetection","sourcesContent":["<template>\n  <div class=\"pic\">\n    <div style=\"background:white;\">\n      <div style=\"border-left: 10px solid #67C23A;padding:10px;margin:10px;font-size:14px;border-bottom:1px solid #ccc;\">\n        图片检测&nbsp;\n        <el-button type=\"text\" icon=\"el-icon-refresh\" @click=\"clearAll\"></el-button>\n      </div>\n    </div>\n    <div style=\"flex:1;display:flex;\">\n      <div style=\"flex:1;display:flex;flex-direction:column;\">\n        <div class=\"options\" style=\"display:flex;align-items:center; height: 66px;width: 1200px\" >\n          <!-- <div>\n            <span style=\"font-weight: bold;\">检测类型：</span>\n            <span >区域入侵</span>\n          </div> -->\n          <el-select v-model=\"uploadData.type\" placeholder=\"请选择检测类型\" @change=\"selectChange\">\n            <el-option :key=\"item.value\" :label=\"item.label\" :value=\"item.value\"\n              v-for=\"item in [{value: 'attitude', label: '姿态异常'},{value: 'intrusion', label: '区域入侵'},]\">\n            </el-option>\n          </el-select>\n          <div style=\"flex:1;display:flex;\">\n            <div v-if=\"!intrusionStyle\" style=\"display:flex;line-height:28px;align-items:center;\">\n              <h4 style=\"width:80px; padding:0;\">置信度:</h4>\n              <el-slider v-model=\"uploadData.confidence\" style=\"width:215px;\" :step=\"0.01\" :max=\"1\"></el-slider>\n              <el-tag style=\"width:35px;text-align:center;;\">{{uploadData.confidence}}</el-tag>\n            </div>\n            <div v-if=\"!intrusionStyle\" style=\"display:flex;line-height:28px;flex:1;align-items:center;\">\n              <h4 style=\"width:80px; padding:0;\">nms:</h4>\n              <el-slider v-model=\"uploadData.nms\" style=\"width:215px;\" :step=\"0.01\" :max=\"1\"></el-slider>\n              <el-tag style=\"width:35px;text-align:center;\">{{uploadData.nms}}</el-tag>\n            </div>\n          </div>\n          <div class=\"buttons\">\n            <el-upload ref=\"upload\"  action=\"/api/postImg\"  :data=\"uploadData\" :on-change=\"uploadChange\" :on-success=\"uploadSuccess\"\n              :show-file-list=\"false\" :file-list=\"fileList\" :auto-upload=\"false\" :on-error=\"uploadError\" @change.native=\"nativeUploadChange\">\n              <el-button slot=\"trigger\" size=\"small\" type=\"primary\">选取文件</el-button>\n              <el-button :loading=\"uploadLoding\" style=\"margin-left: 10px;\" size=\"small\" :type=\"uploadBtn\" @click=\"submitUpload\">上传并检测</el-button>\n              <el-button v-show=\"!intrusionStyle\" @click=\"clearData\"  style=\"margin-left: 10px;\" size=\"small\" type=\"danger\">清空</el-button>\n            </el-upload>\n          </div>\n        </div>\n        <div  v-show=\"!intrusionStyle\" style=\"flex:1;display:flex; width: 1200px; background-color:#eee\">\n          <egp-svg  ref=\"egpSvg\" style=\"flex:1;border-sizing: border-box;\" \n            :imgSrc=\"imgSrc\" :options=\"svgOptions\">\n          </egp-svg>\n        </div>\n        <div v-show=\"intrusionStyle\" style=\"flex:1;display:flex; width: 1200px; background-color:#eee\">\n           <img :src=\"imgSrc\" style=\"flex:1;border-sizing: border-box;border: 1px solid #c0c0c0;width:100%; height: 100%;\"  alt=\"\">\n        </div>\n      </div>\n      <div style=\"min-width:500px;margin-top:48px;margin-left: 50px;\">\n        <div style=\"width: 100%; height: 300px; margin-top:25px;\">\n          <img :src=\"resultImg\" alt=\"\" style=\"width: 100%; height: 100%;\" @click=\"showResult\">\n        </div>\n        <record-detail ref=\"recordDetail\" :detectionResult='detectionResult' ></record-detail>  \n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n\nimport { Component, Vue, Watch } from 'vue-property-decorator';\nimport moment from 'moment';\nimport { EgpSvg } from 'egp-web-components';\nimport Card from '@/components/card/Main.vue';\nimport API from '@/api';\nimport { Params, Rule, originRule, Record } from '../../api/intrusion';\nimport { ElUpload } from 'element-ui/types/upload';\nimport axios from 'axios';\nimport uuid from 'uuid/v4';\nimport recordDetail from './RecordDetail.vue'\n\ninterface Point {\n  x: number;\n  y:number;\n}\n\n\n// http://192.168.3.109:7001/postImg\n@Component({\n  components: {\n    EgpSvg,\n    recordDetail,\n  }\n})\nexport default class IntrusionDetection extends Vue {\n  $refs!: {\n    upload: ElUpload;\n    egpSvg: any;\n    recordDetail:recordDetail;\n  }\n  private svgOptions: any = {};\n  private fileList: any[] = [];\n  private files: any[] = [];\n  private imgSrc = '';\n  private uploadLoding = false;\n  private detectionResult: any = {} \n  private resultImg = ''\n  private secondSelect = false;\n  private uploadBtn = 'success';\n  private intrusionStyle = true;\n\n  private uploadData: {\n    confidence: number,\n    nms: number,\n    type: string,\n    region: string,\n  } = {\n    confidence: 0.8,\n    nms: 0.4,\n    type: 'attitude',\n    region: '',\n  };\n\n  mounted(){\n    if(this.uploadData && this.uploadData.hasOwnProperty('confidence'))  delete this.uploadData.confidence;\n    if(this.uploadData && this.uploadData.hasOwnProperty('nms'))  delete this.uploadData.nms;\n    if(this.uploadData && this.uploadData.hasOwnProperty('region'))  delete this.uploadData.region;\n  }\n  \n  private async submitUpload() {\n    const fs = this.$refs.upload;\n    if(!fs) return;\n    let rules: any[] = [];\n    const { uploadFiles } = fs as any;\n    if(uploadFiles.length === 0){\n       this.$message({\n        message: '请选择文件后上传',\n        type:'warning'\n      })\n      return;\n    }\n    if(this.$refs.egpSvg) rules = this.$refs.egpSvg.getData();\n    if(!rules.length && this.uploadData.type === 'intrusion'){\n      this.$message({\n        message: '请您绘画规则后上传',\n        type:'warning'\n      })\n      return;\n    }\n\n    if(this.uploadLoding){\n       this.$message({\n        message: '图片上传还未完成，请您稍等',\n        type:'warning'\n      })\n      return;\n    }\n    if(this.secondSelect){\n       this.$message({\n        message: '图片已经上传，请重新选择图片后上传',\n        type:'warning'\n      })\n      return;\n    }\n    this.uploadLoding = true;\n    this.secondSelect = true;\n    (fs as any).uploadFiles = (fs as any).uploadFiles || [];\n    (fs as any).uploadFiles = [(fs as any).uploadFiles[(fs as any).uploadFiles.length - 1]];\n    if(this.uploadData.type === 'intrusion') this.uploadData.region = JSON.stringify(this.originToCommon(rules));\n    this.$refs.upload.submit();\n  }\n  \n  private originToCommon(rules: originRule[]): Rule[] {\n    return rules.map(item => ({ location: item.data, rule_id: item.id }));\n  }\n\n  private clearAll() {\n    this.fileList = [];\n    this.imgSrc = '';\n    if(this.$refs.egpSvg)\n      this.$refs.egpSvg.setData([]);\n  }\n  \n  private uploadChange(file: any, fileList: any) {\n    const imgSrc = window.URL.createObjectURL(file.raw);\n    this.imgSrc = imgSrc;\n  }\n  \n  private uploadSuccess(res: any, file: any, fileList: any) {\n    this.uploadLoding = false;\n    this.detectionResult = res;\n    if(res.algType && res.algType !== 1){\n      console.log(res, '分析结果');\n      this.$message({message:\"分析错误\",\n        type: 'error'\n      })\n      return;\n    }\n    this.resultImg = res.img_base64? `data:image/png;base64, ${res.img_base64}` : '';\n    //强制刷新\n    // this.files = [];\n  }\n  \n  private uploadError(res: any, file: any, fileList: any){\n    this.uploadLoding = false;\n    console.log(res, 'uploadError');\n  }\n  \n  //清空数据\n  private clearData(){\n    if(this.$refs.egpSvg) this.$refs.egpSvg.setData([]);\n  }\n //展示结果\n  private showResult(){\n    this.$nextTick(() => {\n      this.$refs.recordDetail.show(this.detectionResult);\n    })\n  }\n\n  private nativeUploadChange(e: any){\n    this.secondSelect = false;\n    this.$refs.egpSvg.setData([]);\n  }\n  \n\n  private selectChange(value: string) {\n    if(value === 'intrusion') {\n      this.intrusionStyle = false;\n      this.$nextTick(() => {\n        this.svgOptions = { type: 'polygon', name: value, color: 'red' };\n        this.uploadData = { confidence: 0.8, nms: 0.4, type: 'intrusion',region: '',};\n      })\n      console.log(this.uploadData, 'uploadData', this.svgOptions )\n    } else {\n      if(this.$refs.egpSvg) this.$refs.egpSvg.setData([]);\n      this.svgOptions = {};\n      this.intrusionStyle = true;\n      if(this.uploadData && this.uploadData.hasOwnProperty('confidence')) {\n        delete this.uploadData.confidence;\n      }\n      if(this.uploadData && this.uploadData.hasOwnProperty('nms')) {\n        delete this.uploadData.nms;\n      }\n      if(this.uploadData && this.uploadData.hasOwnProperty('region')) {\n        delete this.uploadData.region;\n      }\n    }\n  }\n\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.pic{\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  background: white;\n}\nh4{\n  text-align: right;\n}\n\n</style>\n\n"]}]}